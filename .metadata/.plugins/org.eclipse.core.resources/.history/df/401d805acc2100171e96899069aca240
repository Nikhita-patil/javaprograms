package com.bridgelabz.utility;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

import com.bridgelabz.programs.Gambler;
import com.bridgelabz.programs.stack;

/**
 * @author bridgeit
 *
 */
/**
 * @author bridgeit
 *
 */
/**
 * @author bridgeit
 *
 */
public class Utility {
	static Scanner scanner = new Scanner(System.in);

	/**
	 * @param takes
	 *            input argument as string This function is used to remove the
	 *            space between words
	 * 
	 * @return returns a string
	 * 
	 */
	public static String removeSpace(String string) {
		char[] character = string.toCharArray();
		string = "";

		for (int i = 0; i < character.length; i++) {
			if (character[i] != ' ')
				string = string + character[i];
		}
		return string;
	}

	/**
	 * @param takes
	 *            input argument as string This function sorts the string
	 *            alphabetically
	 * @return returns a sorted string
	 */
	public static String sort_string(String string) {
		char[] character = string.toCharArray();
		string = "";

		for (int i = 0; i < character.length; i++) {
			for (int j = i; j < character.length; j++) {
				if (character[i] > character[j]) {
					char c = character[i];
					character[i] = character[j];
					character[j] = c;
				}
			}
		}
		return new String(character);
	}

	/**
	 * @param takes
	 *            argument as two dimension array This function is used to
	 *            display the two dimension array elements
	 * @return returns a two dimension array
	 */
	public int[][] disp(int array_twoDimension[][]) {
		for (int i = 0; i < array_twoDimension.length; i++) {
			for (int j = 0; j < array_twoDimension[i].length; j++) {

				System.out.print(array_twoDimension[i][j] + " ");

			}
			System.out.println();
		}
		return array_twoDimension;
	}

	/**
	 * @param takes
	 *            input argument as string this function checks if a string is
	 *            balanced or not
	 * @return returns values true or false
	 */
	static public boolean isBalanced(String string) {
		stack stack = new stack(string.length());
		char character[] = string.toCharArray();
		for (int i = 0; i < character.length; i++) {
			if (character[i] == '{' || character[i] == '(' || character[i] == '[') {
				stack.push(character[i]);
			} else {
				switch (character[i]) {
				case ']':
					if ((char) stack.pop() != '[')
						return false;
					break;
				case ')':
					if ((char) stack.pop() != '(')
						return false;
					break;
				case '}':
					if ((char) stack.pop() != '{')
						return false;
					break;
				}
			}
		}
		return stack.isEmpty();
	}

	/**
	 * @param takes
	 *            parameter as string array This function is used to sort an
	 *            array element
	 */
	public static void sort1(String string_array[]) {
		Arrays.sort(string_array);
		System.out.println("after sorting");
		for (int l = 0; l < string_array.length; l++) {
			System.out.print(string_array[l] + " ");
		}
		System.out.println();
	}

	/**
	 * @param takes
	 *            input parameter as string type array
	 * @param takes
	 *            input parameter as string type key This function is used to
	 *            search a word from a string
	 * @return returns a index of the string
	 */
	public static int binarysearch(String string[], String key) {
		return search(key, string, 0, string.length);
	}

	/**
	 * This function is used to search a element from the string
	 * 
	 * @param takes
	 *            a as key
	 * @param takes
	 *            input argument as string_array
	 * @param takes
	 *            input argument as low
	 * @param takes
	 *            input argument as high
	 * @return returns the element to be searched if present
	 */
	static int search(String key, String string_array[], int low, int high) {
		if (high <= low)
			return -1;
		int mid = low + (high - low) / 2;
		int cmp = string_array[mid].compareTo(key);
		if (cmp > 0)
			return search(key, string_array, low, mid);
		else if (cmp < 0)
			return search(key, string_array, mid + 1, high);
		else
			return mid;
	}

	/**
	 * this function is used to sort an element using bubble sorting
	 * 
	 * @param takes
	 *            input argument as integer_array
	 * @return returns a sorted integer array
	 */
	public static int[] bubble(int integer_array[]) {

		int temp = 0;
		int n = integer_array.length;
		for (int i = 0; i < n; i++) {
			for (int j = 1; j < (n - i); j++) {
				if (integer_array[j - 1] > integer_array[j]) {
					temp = integer_array[j - 1];
					integer_array[j - 1] = integer_array[j];
					integer_array[j] = temp;
				}
			}
		}
		return integer_array;

	}

	/**
	 * This function is used to generate random numbers
	 * 
	 * @param takes
	 *            input argument as number
	 * @param takes
	 *            input argument as integer_array
	 * @return returns integer array of random numbers
	 */
	public static int[] get_randomnum(int number, int integer_array[]) {
		Random r = new Random();
		int generate;
		int count = 0;
		for (int i = 0; i < integer_array.length; i++) {
			generate = r.nextInt(number) + 1;
			integer_array[i] = generate;
			count++;
			integer_array[i] = generate;
			for (int j = 0; j < i; j++) {
				if (integer_array[j] == generate) {
					i--;
					break;
				}
			}
		}
		for (int k = 0; k < integer_array.length; k++) {
			System.out.println(integer_array[k] + " ");
		}
		System.out.println();
		System.out.println("count " + count);
		return integer_array;
	}

	/**
	 * This function is used to calculate the probability of getting head and
	 * tail
	 * 
	 * @param takes
	 *            input argument as number
	 */
	public static void flip(int number) {
		double head = 0.0;
		double tail = 0.0;
		double random = 0.0;
		for (double i = 1; i <= number; i++) {
			random = Math.random();
			System.out.println("the random number generated" + random);
			if (random < 0.5)
				tail++;
			else
				head++;
		}

		System.out.println("the probability of getting head =" + (head / number) * 100 + "%");
		System.out.println("the probability of getting tail=" + (tail / number) * 100 + "%");
	}

	/**
	 * This function is used to get the chances of winning and losing
	 * 
	 * @param takes
	 *            input argument as trials
	 * @param takes
	 *            input argument as stake
	 * @param takes
	 *            input argument as goal
	 */
	public void stake(int trials, int stake, int goal) {
		double loss = 0;
		double win = 0;
		if (stake > 0 && stake < goal) {

			for (int t = 0; t < trials; t++) {

				if (Math.random() < 0.5) {
					loss++;
					stake--;
					// System.out.println("display the stack if we win" +
					// stake);
				} else {
					win++;
					stake++;
					// System.out.println("display the stack if we loss" +
					// stake);
				}
			}

		}

		else {
			String[] args = new String[1];
			System.out.println("goal should be greater than stake");
			System.out.println("enter the data again");
			Gambler.main(args);
		}
		System.out.println("winning chance is =" + Math.round((win * 100) / trials) + " %");
		System.out.println("lose chance is =" + Math.round((loss * 100) / trials) + " %");

	}

	/**
	 * This function is used to get the harmonicseries
	 * 
	 * @param takes
	 *            input argument as number
	 * @param takes
	 *            input argument as sum
	 */
	public void harmonicSeries(int number, double sum) {
		for (double i = 1; i <= number; i++) {
			sum = sum + (1 / i);
		}
		System.out.println("the harmonic series is \n" + sum);
	}

	/**
	 * This function is used to sort an array using insertion sort
	 * 
	 * @param takes
	 *            input argument as string_array
	 */
	public static void insertion(String string_array[]) {
		String temp;
		for (int i = 1; i < string_array.length; i++) {
			temp = string_array[i];
			int j = 0;
			for (j = i; j > 0; j--)
				if (temp.compareTo(string_array[j - 1]) < 0)
					string_array[j] = string_array[j - 1];
				else
					break;
			string_array[j] = temp;
		}
	}

	/**
	 * This function is used to check whether the given year is leap year or not
	 * 
	 * @param takes
	 *            input argument as year
	 */
	public static void checkleap(int year) {

		if (year % 4 == 0 && year % 100 != 0 && year != 0) {
			System.out.println("the year is a leap year");

		} else if (year % 4 == 0 && year % 100 == 0 && year % 400 == 0 && year != 0)
			System.out.println("Given year is Leap year");
		else
			System.out.println("Given year is not Leap year");
	}

	/**
	 * This function is used to calculate the power of 2
	 * 
	 * @param takes
	 *            input argument as number
	 * @param takes
	 *            input argument as quotient
	 */
	public static void poweroftwo(int number, int quotient) {
		for (int i = 0; i < number; i++) {
			System.out.println("the value " + quotient);
			quotient = 2 * quotient;

		}
	}

	/**
	 * This function is used to check if a number is prime or not
	 * 
	 * @param takes
	 *            input argument as number
	 * @return return a value true or false
	 */
	public static boolean prime(int number) {
		int i, j = 0;
		for (i = 2; i <= number; i++) {
			if (number % i == 0)
				j++;
		}
		if (j == 1)
			return true;
		else
			return false;
	}

	/**
	 * This function is used to calculate the start time
	 * 
	 * @param takes
	 *            input argument as startTime
	 */
	public static double timeStart(double startTime) {
		System.out.println("press 1 to start the time");

		int x = scanner.nextInt();
		if (x == 1) {
			startTime = System.currentTimeMillis();
		}
		return startTime;
	}

	/**
	 * This function is used to calculate the stop time
	 * 
	 * @param takes
	 *            input argument as stopTime
	 */
	public static double timeStop(double stopTime) {

		System.out.println("press 0 to stop the time");
		int y = scanner.nextInt();
		if (y == 0) {
			stopTime = System.currentTimeMillis();
		}
		return stopTime;
	}

	/**
	 * function to calculate the elapse time between the start time and stoptime
	 * 
	 * @param takes
	 *            input argument as stopTime
	 * @param takes
	 *            input argument as startTime
	 * @param takes
	 *            input argument as elapsedTime
	 */
	public static void timeElapse(double stopTime, double startTime, double elapsedTime) {

		System.out.println("elapsed time is");
		elapsedTime = (stopTime - startTime) / 1000;
		System.out.println(elapsedTime + "sec");
	}

	/**
	 * function to calculate the sum of integer values
	 * 
	 * @param takes
	 *            input argument as array
	 * @param takes
	 *            input argument as count
	 */
	public static void sumInt(int array[], int count) {
		for (int i = 0; i < array.length; i++) {
			for (int j = i + 1; j < array.length; j++) {
				for (int k = j + 1; k < array.length; k++) {
					int sum = array[i] + array[j] + array[k];
					if (sum == 0) {
						count++;
						System.out.println("the value of a[i] a[j] a[k]" + array[i] + array[j] + array[k]);
					}
				}
			}
		}
		System.out.println("the value of count is " + count);
	}

	/**
	 * function to find the number of binary tree with respect to node
	 * 
	 * @param takes
	 *            input argument as node
	 * @return the number of trees
	 */
	public static double numberTree(double node) {
		double sum = 0;
		if (node == 0)
			return 1;
		else if (node == 1)
			return 1;
		else if (node == 2)
			return 2;
		else {
			for (double i = 0; i < node; i++) {
				sum = sum + numberTree(i) * numberTree(node - i - 1);
			}
		}
		return Math.round(sum);
	}

	static public void addToFile(String string) {

		FileOutputStream file_Output = null;
		try {
			file_Output = new FileOutputStream("/home/bridgeit/workspace/program/src/txtFile/hello");
			byte byte_array[] = string.getBytes();
			file_Output.write(byte_array);
			file_Output.flush();
			// System.out.println("Data inserted SuccessFully");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (file_Output != null) {
				try {
					file_Output.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	FileWriter file_writer = null;

	public String getFile() {

		FileInputStream file_inputstring;
		String string = "";
		int i;
		try {
			file_inputstring = new FileInputStream("/home/bridgeit/workspace/program/src/txtFile/hello");
			try {
				while ((i = file_inputstring.read()) != -1) {
					string = string + (char) i;
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return string;

	}

	static public void unordered_addToFile(String string) {

		FileOutputStream file_Output = null;
		try {
			file_Output = new FileOutputStream("/home/bridgeit/workspace/program/src/txtFile/word.txt");
			byte byte_array[] = string.getBytes();
			file_Output.write(byte_array);
			file_Output.flush();
			// System.out.println("Data inserted SuccessFully");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (file_Output != null) {
				try {
					file_Output.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public String unordered_getFile() {

		FileInputStream file_inputstring;
		String string = "";
		int i;
		try {
			file_inputstring = new FileInputStream("/home/bridgeit/workspace/program/src/txtFile/word.txt");
			try {
				while ((i = file_inputstring.read()) != -1) {
					string = string + (char) i;
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return string;

	}
	public boolean isAnagram(String string_one,String string_two)
	{
		
	       string_one = removeSpace(string_one);
			string_two = removeSpace(string_two);

			if (string_one.length() != string_two.length()) {
				System.out.println("Not a anagram Strings differ in charactor length");
				return false;
			}
			else
			{
			string_one=lowerCase(string_one);
			string_two=lowerCase(string_two);
			}
			boolean balance=check(string_one,string_two);
			return balance;
	}
	public boolean check(String string_one,String string_two)
	{

			string_one= sort_string(string_one);
			string_two = sort_string(string_two);

			char[] ch1 = string_one.toCharArray();
			char[] ch2 = string_two.toCharArray();

			for (int i = 0; i < ch1.length; i++) {
				if (ch1[i] != ch2[i]) {
					System.out.println("Strings are not a Anagram");
					return false;
				}
			}

			System.out.println("Strings are Anagram");
	 return true;
		}
	public String lowerCase(String string)
	{
		char array[]=string.toCharArray();
		string="";
		for(int i=0;i<array.length;i++)
		{
			if(array[i]>='A' && array[i]<='Z')
			{
		
		string=string+(char)(array[i]+32);
			}
			else
				string=string+array[i];
	}
	return string;
	}
	 public [] read_array(int number)
	 {
	        int[] array=new String[number];
	      System.out.println("the array elements are ");
	     
	         for(int i=0;i<array.length;i++)
	          {
	            array[i]=scanner.next();
	          }
			return array;
	 }
}
